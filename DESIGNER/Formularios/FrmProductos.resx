<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAACAAAABAAAAAYAAAAIAAAACwAAAA0AAAAPAAAAEAAAAA8AAAAOAAAADAAA
        AAoAAAAGAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABQAAAAkAAAANAAAAEwAAABgAAAAeAAAAIwAAACgAAAAsAAAALQYX
        QEsEJ3x7ACmJggAieFkACR0aAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJAAAADgAAABYAAAAcAAAAJQAAAC0AAAA1AAAAPQAD
        CkkPNY2yF0Wy+w4/tP4JOq7+Bjap/gIypeoAK5ZpAABVAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAkAAAAPAAAAFgAAAB4AAAAmAAAALwAA
        ADcAAAA+CC+RsxtJvv4bTMf+EEPH/g1Awv4LPLr+CDev/gUyqvwALqVpAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHx8fCB8fHxgUFBQZAAAAFQAA
        ABwAAAAiAAAAKAATSVAOPb37HU7Q/hRK1v4NRdj+DUTV/g1Czv4MPsL+CTi0/gI1vu4ALbQRAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPz8/BK6urmi7u7vSyMjI9cnJ
        ye+8vLy7kJCQQwAAAA8AAAARAyychBNEy/4YTdz+DEbi/gpF5v4MRuX+DkXe/g1D1P4LPsf+ATjL/gA1
        xlEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/fwK1tbWgzs7O/dra
        2v7e3t7+3t7e/tra2v7V1dX5tbe3egA/fwQFNLjHFUjX/hNK5f4FQuv+BUPw/ghF8P4LRuv+CkPi/gM8
        3f4DOtT+ADbLYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vYM/P
        z/3f39/+5eXl/ujo6P7n5+f+5OTk/t3d3f7V1dX8kpeuZQI2y/cPRuL+DUfs/gNB8v4BQff+AUH3/gJA
        8/4BPuz+ATzj/gg/2P4AM85FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIqK
        ihjIyMjn3d3d/ujo6P7u7u7+8PDw/u/v7/7r6+v+5OTk/tra2v6hq8z1ADfV/gI+6f4EQvH+AUL3/gFC
        +v4BQvn+AUH1/gE/7v4BPeT+CkDZ8QAu0AsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABu7u7n9fX1/7n5+f+7+/v/vT09P729vb+9PT0/u/v7/7n5+f+3t7e/sPH0v4HP9v+AULr/gFD
        8/4BRfj+AUb6/gFF+f4BRPP+AULr/gdD4v4FP9ixAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKioqETR0dH75OTk/u7u7v709PT++Pj4/vn5+f729vb+8fHx/unp6f7e3t7+w8jT/gZE
        4v4BRu7+AUj1/gFJ+f4BSfr+AUn4/gFH8v4BRen+Ckng/gA/1mUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB/f38KxsbG1d3d3f7s7Oz+8vLy/vf39/76+vr++vr6/vb29v7w8PD+5+fn/t7e
        3v6Zq9X+AEjo/gBN8P4ATvb+AFD6/gBQ+v4ATvb+AEzw/gBJ5v4JTN34AD/PIAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKystn7W1tb+6Ojo/vDw8P729vb++fn5/vr6+v75+fn+9PT0/u3t
        7f7j4+P+3d3d/snN2P5Zhuj+A1Py/gBT+P4AVPr+AFT5/gBS9f4AUO3+A0/k/gdO28oAAH8CAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIUsOTm69ODg4v7t7e3+9PT0/vj4+P76+vr++fn5/vb2
        9v7w8PD+6Ojo/uHh4f7U1NT+39/f/u3t7f7Q2/L+dqH3/ixy+P4IW/j+AFXz/gBS6/4MV+H+F1nXgAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/AgAArr0AAMH+dHTd/vLy8v739/f++fn5/vr6
        +v739/f+8/Pz/uzs7P7k5OT+29vb/tHR0f7m5ub+7+/v/vb29v76+vr++Pj5/uDo9f7C0+/+t8jm/sfO
        3P3Lz9k2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBhAQDB/QEA0v4BANr+Zmbp/u7u
        +P76+vr++fn5/vX19f7v7+/+5+fn/uLi4v28vLzK1tbW/unp6f7x8fH++Pj4/vr6+v75+fn+9fX1/u7u
        7v7l5eX+3Nzc47+/vwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFFwEAu+cBANH+AQDd/gEA
        5P4BAOf+Kyrt/re29v739/f+8vLy/uvr6/7j4+P+2trauL+/v8Hc3Nz+6+vr/vPz8/75+fn++vr6/vj4
        +P7z8/P+7Ozs/uPj4/7Z2dmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALSgAQDN/gEA
        3v4BAOb+AQDs/gEA7/4BAPD+AgHt/jk47P6Pj+r+vb3j/sbG3vG4uLg6y8vL+ODg4P7s7Oz+8/Pz/vj4
        +P76+vr+9vb2/vHx8f7o6Oj+39/f/tXV1VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfQwEA
        yPsBANz+AQDn/gEA7f4BAPL+AQD0/gEA8/4BAPD+AQDq/gEA4v4aGd3+DAzReqSkp0nNzc3+4uLi/uzs
        7P7z8/P++Pj4/vj4+P709PT+7u7u/uXl5f7c3Nzx1NTUEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAALe8AQDU/gEA5P4BAO3+AQDz/gEA9/4BAPf+AQD1/gEA8P4BAOn+DAvi/hcV2tIAANoHqKisUMzM
        zP7g4OD+6enp/vDw8P709PT+9PT0/vDw8P7p6en+4ODg/tfX17cAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACiCwEBv+4BAtv+AQLo/gEC8P4BAvb+AQL4/gEC+P4BAvT+AQLu/gED5f4cHeD6AADWPwAA
        AACGhoYkyMjI/Nvb2/7k5OT+6urq/u7u7v7u7u7+6enp/uLi4v7b29v+1NTUawAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAALANAQTB8AoO3P4MEOf+DBHu/gwR8/4MEfX+DBH0/gYK7/4BBef+Fxrh/g0Q
        2pgAAAAAAAAAAAAAAAC2traw09PT/tzc3P7i4uL+5ubm/uXl5f7h4eH+29vb/tbW1uvHx8cXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAB7XKIinb/iQs5f4kLOv+JC3v/iQt8f4kLO/+Iyvq/goT
        4f4aIdvmAADWEwAAAAAAAAAAAAAAAJmZmRnAwMDQ19fX/tra2v7b29v+29vb/tra2v7a2tr2zs7OVAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsTsFsoMtT9Q07j/kJO6P5CTez+Qk7s/kJN
        6/5DTuf+Kzfe/Rsg010AAAAAAAAAAAAAAAAAAAAAAAAAAH9/fw7Dw8N409PTztnZ2fPa2tru19fXtc3N
        zTkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAH8CVVWqAyEqxYpFUdz7ZHDm/l9s
        6P5fbOj+ZHDo/ml05f4vOdSbPz//BAAA/wIAAH8CAAAAAn9/fwJ/f38Cf39/Av///wEAAAAAzMzMCtTU
        1AYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8Bv7+/BL+/vwR/f78EmZnMBS85
        zEs4RdXFVmTe9mNv4fldat/YNkLSbH9/vwh/f78Ev7+/BL+/vwS/v78Ev7+/BL+/vwS/v78E////AgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wLa2toH2traB9ra
        2gfa2toH2traB7a22gehodYTkJDSF7ba2gfa2toH2traB9ra2gfa2toH2traB9ra2gfa2toHtra2B7a2
        tge/v78EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////A+Xl
        5Qrl5eUK5eXlCuXl5Qrl5eUK5eXlCuXl5Qrl5eUK5eXlCuXl5Qrl5eUK5eXlCuXl5QrMzMwKzMzMCszM
        zArMzMwKzMzMCqqqqgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADMzMwFzMzMD8zMzA/MzMwPzMzMD8zMzA/MzMwPzMzMD8zMzA/MzMwPzMzMD8zMzA/MzMwPzMzMD8zM
        zA/MzMwPzMzMD7u7uw+7u7sPqqqqCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANTU1AbW1tYT1tbWE9bW1hPW1tYT1tbWE9bW1hPW1tYT1tbWE9bW1hPW1tYT1tbWE9bW
        1hPW1tYT1tbWE8nJyRPJyckTycnJE7u7uxOioqILAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////wP//+AAP//AAB//wAAP/4AAD//AAAf/gAAH/wAAB/8AAAf+A
        AAH/AAAD/wAAA/4AAAP+AAAD/AAAB/gAAAf4AAAH8AAAD/AAAA/gAAAP4AAAH8ABAB/AA4AfwAOAP+AH
        wH+AAAn/AAAP/wAAD/8AAA//AAAP/wAAD/8=
</value>
  </data>
</root>